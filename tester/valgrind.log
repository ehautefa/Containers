==116834== Memcheck, a memory error detector
==116834== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==116834== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==116834== Command: ./test
==116834== Parent PID: 116829
==116834== 
==116834== 
==116834== HEAP SUMMARY:
==116834==     in use at exit: 192 bytes in 3 blocks
==116834==   total heap usage: 23 allocs, 20 frees, 75,072 bytes allocated
==116834== 
==116834== 64 bytes in 1 blocks are indirectly lost in loss record 1 of 3
==116834==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==116834==    by 0x403946: __gnu_cxx::new_allocator<ft::node<int const, int, std::less<int const>, std::allocator<ft::pair<int const, int> > > >::allocate(unsigned long, void const*) (new_allocator.h:115)
==116834==    by 0x4025F4: ft::map<int, int, std::less<int>, std::allocator<ft::pair<int const, int> > >::operator[](int const&) (map.hpp:103)
==116834==    by 0x4013E2: test_operator() (6.cpp:35)
==116834==    by 0x402478: main (6.cpp:149)
==116834== 
==116834== 64 bytes in 1 blocks are indirectly lost in loss record 2 of 3
==116834==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==116834==    by 0x403946: __gnu_cxx::new_allocator<ft::node<int const, int, std::less<int const>, std::allocator<ft::pair<int const, int> > > >::allocate(unsigned long, void const*) (new_allocator.h:115)
==116834==    by 0x4025F4: ft::map<int, int, std::less<int>, std::allocator<ft::pair<int const, int> > >::operator[](int const&) (map.hpp:103)
==116834==    by 0x401412: test_operator() (6.cpp:36)
==116834==    by 0x402478: main (6.cpp:149)
==116834== 
==116834== 192 (64 direct, 128 indirect) bytes in 1 blocks are definitely lost in loss record 3 of 3
==116834==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==116834==    by 0x403946: __gnu_cxx::new_allocator<ft::node<int const, int, std::less<int const>, std::allocator<ft::pair<int const, int> > > >::allocate(unsigned long, void const*) (new_allocator.h:115)
==116834==    by 0x4025F4: ft::map<int, int, std::less<int>, std::allocator<ft::pair<int const, int> > >::operator[](int const&) (map.hpp:103)
==116834==    by 0x401352: test_operator() (6.cpp:32)
==116834==    by 0x402478: main (6.cpp:149)
==116834== 
==116834== LEAK SUMMARY:
==116834==    definitely lost: 64 bytes in 1 blocks
==116834==    indirectly lost: 128 bytes in 2 blocks
==116834==      possibly lost: 0 bytes in 0 blocks
==116834==    still reachable: 0 bytes in 0 blocks
==116834==         suppressed: 0 bytes in 0 blocks
==116834== 
==116834== For lists of detected and suppressed errors, rerun with: -s
==116834== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
